<?php

namespace Kunstmaan\AdminNodeBundle\Repository;

use Kunstmaan\AdminNodeBundle\Entity\HasNode;

use Kunstmaan\AdminNodeBundle\Entity\Node;
use Kunstmaan\AdminBundle\Entity\PageIFace;
use Kunstmaan\AdminBundle\Modules\ClassLookup;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * NodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NodeRepository extends EntityRepository
{
	public function getTopNodes($user, $permission) {
	   /* $qb = $this->createQueryBuilder('b')
	               ->select('b')
                   ->where('b.parent is null')
                   ->andWhere('b.id IN (
                        SELECT p.refId FROM Kunstmaan\AdminBundle\Entity\Permission p WHERE p.refEntityname = b.refEntityname AND p.permissions LIKE ?1 AND p.refGroup IN(?2)
                   )')
	               ->addOrderBy('b.sequencenumber', 'DESC')
                   ->setParameter(1, '%|'.$permission.':1|%')
                   ->setParameter(2, $user->getGroupIds());*/
	    $qb = $this->createQueryBuilder('b')
	               ->select('b')
                   ->where('b.parent is null')
                   ->andWhere('b.id IN (
                        SELECT p.refId FROM Kunstmaan\AdminBundle\Entity\Permission p WHERE p.refEntityname = ?1 AND p.permissions LIKE ?2 AND p.refGroup IN(?3)
                   )')
	               ->addOrderBy('b.sequencenumber', 'DESC')
	               ->setParameter(1, 'Kunstmaan\AdminNodeBundle\Entity\Node')
                   ->setParameter(2, '%|'.$permission.':1|%')
                   ->setParameter(3, $user->getGroupIds());

	    return $qb->getQuery()
	              ->getResult();
	}

	public function getNodeFor(HasNode $hasNode) {
		$nodeVersion = $this->getEntityManager()->getRepository('KunstmaanAdminNodeBundle:NodeVersion')->getNodeVersionFor($hasNode);
		if(!is_null($nodeVersion)){
			$nodeTranslation = $nodeVersion->getNodeTranslation();
			if(!is_null($nodeTranslation)){
				return $nodeTranslation->getNode();
			}
		}
		return null;
	}

	public function getNodeForIdAndEntityname($id, $entityName) {
		$nodeVersion = $this->getEntityManager()->getRepository('KunstmaanAdminNodeBundle:NodeVersion')->findOneBy(array('refId' => $id, 'refEntityname' => $entityName));
		if($nodeVersion){
			return $nodeVersion->getNodeTranslation()->getNode();
		}
		return null;
	}

	public function getNodeForSlug($parentNode, $slug){
		$slugparts = explode("/", $slug);
		$result = null;
		foreach($slugparts as $slugpart){
			if($parentNode){
				if($r = $this->findOneBy(array('slug' => $slugpart, 'parent.parent' => $parentNode->getId()))){
					$result = $r;
				}
			} else {
				if($r = $this->findOneBy(array('slug' => $slugpart))){
					$result = $r;
				}
			}
		}
		return $result;
	}

	public function createNodeFor(HasNode $hasNode, $lang, $owner){
		$em = $this->getEntityManager();
		$classname = ClassLookup::getClass($hasNode);
		if(!$hasNode->getId()>0){
			throw new \Exception("the entity of class ". $classname . " has no id, maybe you forgot to flush first");
		}
		$entityrepo = $em->getRepository($classname);
		$node = new Node();
		$node->setSequencenumber(1);
		$node->setRefEntityname($classname);
		$node->setDeleted(false);
		$parent = $hasNode->getParent();
		if($parent){
			$parentNodeVersion = $em->getRepository('KunstmaanAdminNodeBundle:NodeVersion')->findOneBy(array('refId' => $parent->getId(), 'refEntityname' => ClassLookup::getClass($parent)));
			if($parentNodeVersion){
				$node->setParent($parentNodeVersion->getNodeTranslation()->getNode());
			}
		}
		$em->persist($node);
		$em->flush();
		$em->refresh($node);
		$nodeTranslation = $em->getRepository('KunstmaanAdminNodeBundle:NodeTranslation')->createNodeTranslationFor($hasNode, $lang, $node, $owner);
		return $node;
	}

}